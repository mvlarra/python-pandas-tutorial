{"telemetry_id":"4fkgpuh1hz3ebv49","slug":"pandas-for-machine-learning","agent":"vscode","tutorial_started_at":1737655035087,"steps":[{"slug":"00-welcome","position":0,"files":[{"path":".learn/exercises/00-welcome/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/00-welcome/README.md","name":"README.md","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":false},{"slug":"01-new-terminal","position":1,"files":[{"path":".learn/exercises/01-new-terminal/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/01-new-terminal/README.md","name":"README.md","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":false,"opened_at":1737655089941,"completed_at":1737655113377},{"slug":"01.2-pipenv","position":2,"files":[{"path":".learn/exercises/01.2-pipenv/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/01.2-pipenv/README.md","name":"README.md","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":false,"opened_at":1737655113377,"completed_at":1737655143688},{"slug":"02-install","position":3,"files":[{"path":".learn/exercises/02-install/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/02-install/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/02-install/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":true,"opened_at":1737655143688},{"slug":"02.1-create-a-script","position":4,"files":[{"path":".learn/exercises/02.1-create-a-script/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/02.1-create-a-script/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/02.1-create-a-script/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/02.1-create-a-script/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737655808465,"ended_at":1737655808803,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCAzIGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzAyLjEtY3JlYXRlLWEtc2NyaXB0L3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0gICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW0zIHBhc3NlZBtbMG0bWzMybSBpbiAwLjAxcxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737655611514,"completed_at":1737655808803},{"slug":"02.2-import","position":5,"files":[{"path":".learn/exercises/02.2-import/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/02.2-import/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/02.2-import/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/02.2-import/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737656187955,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSk=","ended_at":1737656188850,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA0IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzAyLjItaW1wb3J0L3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW00IHBhc3NlZBtbMG0bWzMybSBpbiAwLjYwcxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737655903870,"completed_at":1737656188850},{"slug":"03-datasets","position":6,"files":[{"path":".learn/exercises/03-datasets/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/03-datasets/README.md","name":"README.md","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[],"is_testeable":false,"opened_at":1737656194657,"completed_at":1737656311577},{"slug":"04-Series","position":7,"files":[{"path":".learn/exercises/04-Series/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/04-Series/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/04-Series/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/04-Series/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737656392276,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhID0gcGQuU2VyaWVzKFsyMyw0NSw3LDM0LDYsNjMsMzYsNzgsNTQsMzRdKQpwcmludChkYXRhKQ==","ended_at":1737656392879,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCAzIGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA0LVNlcmllcy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW0zIHBhc3NlZBtbMG0bWzMybSBpbiAwLjMxcxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737656311577,"completed_at":1737656392879},{"slug":"04.1-date-range","position":8,"files":[{"path":".learn/exercises/04.1-date-range/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/04.1-date-range/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/04.1-date-range/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/04.1-date-range/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737656772449,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcyk=","ended_at":1737656773095,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA0IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA0LjEtZGF0ZS1yYW5nZS90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW00IHBhc3NlZBtbMG0bWzMybSBpbiAwLjMzcxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737656412433,"completed_at":1737656773095},{"slug":"04.2-series-apply","position":9,"files":[{"path":".learn/exercises/04.2-series-apply/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/04.2-series-apply/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/04.2-series-apply/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/04.2-series-apply/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737656924931,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgpteV9zZXJpZXMgPSBwZC5TZXJpZXMoWzIsIDQsIDYsIDgsIDEwXSkKbXlfc2VyaWVzX25ldyA9IG15X3Nlcmllcy5hcHBseShteV9zZXJpZXMgLyAyKQpwcmludCAobXlfc2VyaWVzX25ldyk=","ended_at":1737656926074,"stdout":"","stderr":"","exit_code":1},{"starting_at":1737656982766,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgpteV9zZXJpZXMgPSBwZC5TZXJpZXMoWzIsIDQsIDYsIDgsIDEwXSkKbW9kaWZpZWRfc2VyaWVzID0gbXlfc2VyaWVzLmFwcGx5KGxhbWJkYSB4OngvMikKcHJpbnQobW9kaWZpZWRfc2VyaWVzKQ==","ended_at":1737656983402,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA0IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA0LjItc2VyaWVzLWFwcGx5L3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW00IHBhc3NlZBtbMG0bWzMybSBpbiAwLjMycxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737656776064,"completed_at":1737656983402},{"slug":"05-dataframes","position":10,"files":[{"path":".learn/exercises/05-dataframes/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/05-dataframes/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/05-dataframes/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/05-dataframes/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737657150219,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCm15X3NlcmllcyA9IHBkLlNlcmllcyhbMiwgNCwgNiwgOCwgMTBdKQptb2RpZmllZF9zZXJpZXMgPSBteV9zZXJpZXMuYXBwbHkobGFtYmRhIHg6eC8yKQpwcmludChtb2RpZmllZF9zZXJpZXMpCgojIDA1IERhdGFGcmFtZXMgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRhdGEgPSBbWyJUb3lvdGEiLCAiQ29yb2xsYSIsICJCbHVlIl0sIFsiRm9yZCIsICJLIiwgIlllbGxvdyJdLCBbIlBvcnNjaGUiLCAiQ2F5ZW5uZSIsICJXaGl0ZSJdXQpkZiA9IHBkLkRhdGFGcmFtZShkYXRhLCBjb2x1bW5zPVsnQnJhbmQnLCAnTW9kZWwnLCAnQ29sb3InXSkKcHJpbnQgKGRmKQ==","ended_at":1737657150792,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA0IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA1LWRhdGFmcmFtZXMvdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW00IHBhc3NlZBtbMG0bWzMybSBpbiAwLjI5cxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737657004469,"completed_at":1737657150793},{"slug":"05.1-dataframe-dict","position":11,"files":[{"path":".learn/exercises/05.1-dataframe-dict/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/05.1-dataframe-dict/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/05.1-dataframe-dict/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/05.1-dataframe-dict/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737657267413,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCm15X3NlcmllcyA9IHBkLlNlcmllcyhbMiwgNCwgNiwgOCwgMTBdKQptb2RpZmllZF9zZXJpZXMgPSBteV9zZXJpZXMuYXBwbHkobGFtYmRhIHg6eC8yKQpwcmludChtb2RpZmllZF9zZXJpZXMpCgojIDA1IERhdGFGcmFtZXMgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRhdGEgPSBbWyJUb3lvdGEiLCAiQ29yb2xsYSIsICJCbHVlIl0sIFsiRm9yZCIsICJLIiwgIlllbGxvdyJdLCBbIlBvcnNjaGUiLCAiQ2F5ZW5uZSIsICJXaGl0ZSJdXQpkZiA9IHBkLkRhdGFGcmFtZShkYXRhLCBjb2x1bW5zPVsnQnJhbmQnLCAnTW9kZWwnLCAnQ29sb3InXSkKcHJpbnQgKGRmKQoKIyAwNS4xIERhdGFGcmFtZSBEaWN0ICAgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRhdGEgPSBbCiAgICB7IAogICAgICAgICJicmFuZCI6ICJUb3lvdGEiLCAKICAgICAgICAibW9kZWwiOiAiQ29yb2xsYSIsCiAgICAgICAgImNvbG9yIjogIkJsdWUiCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJGb3JkIiwgCiAgICAgICAgIm1vZGVsIjogIksiLAogICAgICAgICJjb2xvciI6ICJZZWxsb3ciCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJQb3JzY2hlIiwgCiAgICAgICAgIm1vZGVsIjogIkNheWVubmUiLAogICAgICAgICJjb2xvciI6ICJXaGl0ZSIKICAgIH0sCiAgICB7CiAgICAgICAgImJyYW5kIjogIlRlc2xhIiwgCiAgICAgICAgIm1vZGVsIjogIk1vZGVsIFMiLAogICAgICAgICJjb2xvciI6ICJSZWQiCiAgICB9Cl0KCmRmID0gcGQuRGF0YUZyYW1lKGRhdGEpCgpwcmludChkZik=","ended_at":1737657267995,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCAzIGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA1LjEtZGF0YWZyYW1lLWRpY3QvdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybSAgICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW0zIHBhc3NlZBtbMG0bWzMybSBpbiAwLjMwcxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737657153564,"completed_at":1737657267995},{"slug":"05.2-dataframe-iloc","position":12,"files":[{"path":".learn/exercises/05.2-dataframe-iloc/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/05.2-dataframe-iloc/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/05.2-dataframe-iloc/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/05.2-dataframe-iloc/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737657397848,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCm15X3NlcmllcyA9IHBkLlNlcmllcyhbMiwgNCwgNiwgOCwgMTBdKQptb2RpZmllZF9zZXJpZXMgPSBteV9zZXJpZXMuYXBwbHkobGFtYmRhIHg6eC8yKQpwcmludChtb2RpZmllZF9zZXJpZXMpCgojIDA1IERhdGFGcmFtZXMgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRhdGEgPSBbWyJUb3lvdGEiLCAiQ29yb2xsYSIsICJCbHVlIl0sIFsiRm9yZCIsICJLIiwgIlllbGxvdyJdLCBbIlBvcnNjaGUiLCAiQ2F5ZW5uZSIsICJXaGl0ZSJdXQpkZiA9IHBkLkRhdGFGcmFtZShkYXRhLCBjb2x1bW5zPVsnQnJhbmQnLCAnTW9kZWwnLCAnQ29sb3InXSkKcHJpbnQgKGRmKQoKIyAwNS4xIERhdGFGcmFtZSBEaWN0ICAgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRhdGEgPSBbCiAgICB7IAogICAgICAgICJicmFuZCI6ICJUb3lvdGEiLCAKICAgICAgICAibW9kZWwiOiAiQ29yb2xsYSIsCiAgICAgICAgImNvbG9yIjogIkJsdWUiCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJGb3JkIiwgCiAgICAgICAgIm1vZGVsIjogIksiLAogICAgICAgICJjb2xvciI6ICJZZWxsb3ciCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJQb3JzY2hlIiwgCiAgICAgICAgIm1vZGVsIjogIkNheWVubmUiLAogICAgICAgICJjb2xvciI6ICJXaGl0ZSIKICAgIH0sCiAgICB7CiAgICAgICAgImJyYW5kIjogIlRlc2xhIiwgCiAgICAgICAgIm1vZGVsIjogIk1vZGVsIFMiLAogICAgICAgICJjb2xvciI6ICJSZWQiCiAgICB9Cl0KCmRmID0gcGQuRGF0YUZyYW1lKGRhdGEpCgpwcmludChkZikKCiMgMDUuMiBEYXRhRnJhbWUgaUxvYyAgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRmID0gcGQucmVhZF9jc3YgKCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludChkYXRhX2ZyYW1lLmlsb2NbMTMzLDZdKQ==","ended_at":1737657398438,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA1IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA1LjItZGF0YWZyYW1lLWlsb2MvdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW01IHBhc3NlZBtbMG0bWzMybSBpbiAwLjMwcxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737657271003,"completed_at":1737657398438},{"slug":"05.3-dataframe-head","position":13,"files":[{"path":".learn/exercises/05.3-dataframe-head/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/05.3-dataframe-head/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/05.3-dataframe-head/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/05.3-dataframe-head/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737657554264,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCm15X3NlcmllcyA9IHBkLlNlcmllcyhbMiwgNCwgNiwgOCwgMTBdKQptb2RpZmllZF9zZXJpZXMgPSBteV9zZXJpZXMuYXBwbHkobGFtYmRhIHg6eC8yKQpwcmludChtb2RpZmllZF9zZXJpZXMpCgojIDA1IERhdGFGcmFtZXMgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRhdGEgPSBbWyJUb3lvdGEiLCAiQ29yb2xsYSIsICJCbHVlIl0sIFsiRm9yZCIsICJLIiwgIlllbGxvdyJdLCBbIlBvcnNjaGUiLCAiQ2F5ZW5uZSIsICJXaGl0ZSJdXQpkZiA9IHBkLkRhdGFGcmFtZShkYXRhLCBjb2x1bW5zPVsnQnJhbmQnLCAnTW9kZWwnLCAnQ29sb3InXSkKcHJpbnQgKGRmKQoKIyAwNS4xIERhdGFGcmFtZSBEaWN0ICAgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRhdGEgPSBbCiAgICB7IAogICAgICAgICJicmFuZCI6ICJUb3lvdGEiLCAKICAgICAgICAibW9kZWwiOiAiQ29yb2xsYSIsCiAgICAgICAgImNvbG9yIjogIkJsdWUiCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJGb3JkIiwgCiAgICAgICAgIm1vZGVsIjogIksiLAogICAgICAgICJjb2xvciI6ICJZZWxsb3ciCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJQb3JzY2hlIiwgCiAgICAgICAgIm1vZGVsIjogIkNheWVubmUiLAogICAgICAgICJjb2xvciI6ICJXaGl0ZSIKICAgIH0sCiAgICB7CiAgICAgICAgImJyYW5kIjogIlRlc2xhIiwgCiAgICAgICAgIm1vZGVsIjogIk1vZGVsIFMiLAogICAgICAgICJjb2xvciI6ICJSZWQiCiAgICB9Cl0KCmRmID0gcGQuRGF0YUZyYW1lKGRhdGEpCgpwcmludChkZikKCiMgMDUuMiBEYXRhRnJhbWUgaUxvYyAgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRmID0gcGQucmVhZF9jc3YgKCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludChkYXRhX2ZyYW1lLmlsb2NbMTMzLDZdKQoKIyAwNS4zIERhdGFGcmFtZSBIZWFkIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmLmhlYWQoMykpCg==","ended_at":1737657554947,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA0IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA1LjMtZGF0YWZyYW1lLWhlYWQvdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0gICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW00IHBhc3NlZBtbMG0bWzMybSBpbiAwLjM3cxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737655066369,"completed_at":1737657554947},{"slug":"05.4-dataframe-tail","position":14,"files":[{"path":".learn/exercises/05.4-dataframe-tail/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/05.4-dataframe-tail/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/05.4-dataframe-tail/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/05.4-dataframe-tail/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737657641540,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCm15X3NlcmllcyA9IHBkLlNlcmllcyhbMiwgNCwgNiwgOCwgMTBdKQptb2RpZmllZF9zZXJpZXMgPSBteV9zZXJpZXMuYXBwbHkobGFtYmRhIHg6eC8yKQpwcmludChtb2RpZmllZF9zZXJpZXMpCgojIDA1IERhdGFGcmFtZXMgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRhdGEgPSBbWyJUb3lvdGEiLCAiQ29yb2xsYSIsICJCbHVlIl0sIFsiRm9yZCIsICJLIiwgIlllbGxvdyJdLCBbIlBvcnNjaGUiLCAiQ2F5ZW5uZSIsICJXaGl0ZSJdXQpkZiA9IHBkLkRhdGFGcmFtZShkYXRhLCBjb2x1bW5zPVsnQnJhbmQnLCAnTW9kZWwnLCAnQ29sb3InXSkKcHJpbnQgKGRmKQoKIyAwNS4xIERhdGFGcmFtZSBEaWN0ICAgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRhdGEgPSBbCiAgICB7IAogICAgICAgICJicmFuZCI6ICJUb3lvdGEiLCAKICAgICAgICAibW9kZWwiOiAiQ29yb2xsYSIsCiAgICAgICAgImNvbG9yIjogIkJsdWUiCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJGb3JkIiwgCiAgICAgICAgIm1vZGVsIjogIksiLAogICAgICAgICJjb2xvciI6ICJZZWxsb3ciCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJQb3JzY2hlIiwgCiAgICAgICAgIm1vZGVsIjogIkNheWVubmUiLAogICAgICAgICJjb2xvciI6ICJXaGl0ZSIKICAgIH0sCiAgICB7CiAgICAgICAgImJyYW5kIjogIlRlc2xhIiwgCiAgICAgICAgIm1vZGVsIjogIk1vZGVsIFMiLAogICAgICAgICJjb2xvciI6ICJSZWQiCiAgICB9Cl0KCmRmID0gcGQuRGF0YUZyYW1lKGRhdGEpCgpwcmludChkZikKCiMgMDUuMiBEYXRhRnJhbWUgaUxvYyAgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRmID0gcGQucmVhZF9jc3YgKCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludChkYXRhX2ZyYW1lLmlsb2NbMTMzLDZdKQoKIyAwNS4zIERhdGFGcmFtZSBIZWFkIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmLmhlYWQoMykpCgojIDA1LjQgRGF0YUZyYW1lIFRhaWwgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KcHJpbnQoZGYudGFpbCgzKSkKCgoKCgojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCg==","ended_at":1737657642152,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA0IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA1LjQtZGF0YWZyYW1lLXRhaWwvdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0gICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW00IHBhc3NlZBtbMG0bWzMybSBpbiAwLjMzcxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737657558271,"completed_at":1737657642152},{"slug":"05.5-print-columns","position":15,"files":[{"path":".learn/exercises/05.5-print-columns/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/05.5-print-columns/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/05.5-print-columns/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/05.5-print-columns/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737658074162,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCm15X3NlcmllcyA9IHBkLlNlcmllcyhbMiwgNCwgNiwgOCwgMTBdKQptb2RpZmllZF9zZXJpZXMgPSBteV9zZXJpZXMuYXBwbHkobGFtYmRhIHg6eC8yKQpwcmludChtb2RpZmllZF9zZXJpZXMpCgojIDA1IERhdGFGcmFtZXMgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRhdGEgPSBbWyJUb3lvdGEiLCAiQ29yb2xsYSIsICJCbHVlIl0sIFsiRm9yZCIsICJLIiwgIlllbGxvdyJdLCBbIlBvcnNjaGUiLCAiQ2F5ZW5uZSIsICJXaGl0ZSJdXQpkZiA9IHBkLkRhdGFGcmFtZShkYXRhLCBjb2x1bW5zPVsnQnJhbmQnLCAnTW9kZWwnLCAnQ29sb3InXSkKcHJpbnQgKGRmKQoKIyAwNS4xIERhdGFGcmFtZSBEaWN0ICAgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRhdGEgPSBbCiAgICB7IAogICAgICAgICJicmFuZCI6ICJUb3lvdGEiLCAKICAgICAgICAibW9kZWwiOiAiQ29yb2xsYSIsCiAgICAgICAgImNvbG9yIjogIkJsdWUiCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJGb3JkIiwgCiAgICAgICAgIm1vZGVsIjogIksiLAogICAgICAgICJjb2xvciI6ICJZZWxsb3ciCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJQb3JzY2hlIiwgCiAgICAgICAgIm1vZGVsIjogIkNheWVubmUiLAogICAgICAgICJjb2xvciI6ICJXaGl0ZSIKICAgIH0sCiAgICB7CiAgICAgICAgImJyYW5kIjogIlRlc2xhIiwgCiAgICAgICAgIm1vZGVsIjogIk1vZGVsIFMiLAogICAgICAgICJjb2xvciI6ICJSZWQiCiAgICB9Cl0KCmRmID0gcGQuRGF0YUZyYW1lKGRhdGEpCgpwcmludChkZikKCiMgMDUuMiBEYXRhRnJhbWUgaUxvYyAgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRmID0gcGQucmVhZF9jc3YgKCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludChkYXRhX2ZyYW1lLmlsb2NbMTMzLDZdKQoKIyAwNS4zIERhdGFGcmFtZSBIZWFkIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmLmhlYWQoMykpCgojIDA1LjQgRGF0YUZyYW1lIFRhaWwgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KcHJpbnQoZGYudGFpbCgzKSkKCiMgMDUuNSBQcmludCBDb2x1bW5zIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmW1snTmFtZScsICdUeXBlIDEnXV1bMDoxMF0pCgoKCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCg==","ended_at":1737658074800,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA0IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA1LjUtcHJpbnQtY29sdW1ucy90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybSAgICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW00IHBhc3NlZBtbMG0bWzMybSBpbiAwLjM1cxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737657646532,"completed_at":1737658074800},{"slug":"05.6-loc-function","position":16,"files":[{"path":".learn/exercises/05.6-loc-function/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/05.6-loc-function/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/05.6-loc-function/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/05.6-loc-function/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737658277943,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCm15X3NlcmllcyA9IHBkLlNlcmllcyhbMiwgNCwgNiwgOCwgMTBdKQptb2RpZmllZF9zZXJpZXMgPSBteV9zZXJpZXMuYXBwbHkobGFtYmRhIHg6eC8yKQpwcmludChtb2RpZmllZF9zZXJpZXMpCgojIDA1IERhdGFGcmFtZXMgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRhdGEgPSBbWyJUb3lvdGEiLCAiQ29yb2xsYSIsICJCbHVlIl0sIFsiRm9yZCIsICJLIiwgIlllbGxvdyJdLCBbIlBvcnNjaGUiLCAiQ2F5ZW5uZSIsICJXaGl0ZSJdXQpkZiA9IHBkLkRhdGFGcmFtZShkYXRhLCBjb2x1bW5zPVsnQnJhbmQnLCAnTW9kZWwnLCAnQ29sb3InXSkKcHJpbnQgKGRmKQoKIyAwNS4xIERhdGFGcmFtZSBEaWN0ICAgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRhdGEgPSBbCiAgICB7IAogICAgICAgICJicmFuZCI6ICJUb3lvdGEiLCAKICAgICAgICAibW9kZWwiOiAiQ29yb2xsYSIsCiAgICAgICAgImNvbG9yIjogIkJsdWUiCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJGb3JkIiwgCiAgICAgICAgIm1vZGVsIjogIksiLAogICAgICAgICJjb2xvciI6ICJZZWxsb3ciCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJQb3JzY2hlIiwgCiAgICAgICAgIm1vZGVsIjogIkNheWVubmUiLAogICAgICAgICJjb2xvciI6ICJXaGl0ZSIKICAgIH0sCiAgICB7CiAgICAgICAgImJyYW5kIjogIlRlc2xhIiwgCiAgICAgICAgIm1vZGVsIjogIk1vZGVsIFMiLAogICAgICAgICJjb2xvciI6ICJSZWQiCiAgICB9Cl0KCmRmID0gcGQuRGF0YUZyYW1lKGRhdGEpCgpwcmludChkZikKCiMgMDUuMiBEYXRhRnJhbWUgaUxvYyAgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRmID0gcGQucmVhZF9jc3YgKCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludChkYXRhX2ZyYW1lLmlsb2NbMTMzLDZdKQoKIyAwNS4zIERhdGFGcmFtZSBIZWFkIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmLmhlYWQoMykpCgojIDA1LjQgRGF0YUZyYW1lIFRhaWwgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KcHJpbnQoZGYudGFpbCgzKSkKCiMgMDUuNSBQcmludCBDb2x1bW5zIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmW1snTmFtZScsICdUeXBlIDEnXV1bMDoxMF0pCgojIDA1LjYgTG9jIEZ1bmN0aW9uIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgpwcmludChkZi5sb2NbZGZbJ0F0dGFjayddID4gODBdKQoKIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgojIHB5dGhvbiBhcHAucHk=","ended_at":1737658278571,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA1IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA1LjYtbG9jLWZ1bmN0aW9uL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybSAgICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW01IHBhc3NlZBtbMG0bWzMybSBpbiAwLjM1cxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737658076930,"completed_at":1737658278571},{"slug":"05.7-filter-and-count","position":17,"files":[{"path":".learn/exercises/05.7-filter-and-count/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/05.7-filter-and-count/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/05.7-filter-and-count/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/05.7-filter-and-count/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737658812495,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCm15X3NlcmllcyA9IHBkLlNlcmllcyhbMiwgNCwgNiwgOCwgMTBdKQptb2RpZmllZF9zZXJpZXMgPSBteV9zZXJpZXMuYXBwbHkobGFtYmRhIHg6eC8yKQpwcmludChtb2RpZmllZF9zZXJpZXMpCgojIDA1IERhdGFGcmFtZXMgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRhdGEgPSBbWyJUb3lvdGEiLCAiQ29yb2xsYSIsICJCbHVlIl0sIFsiRm9yZCIsICJLIiwgIlllbGxvdyJdLCBbIlBvcnNjaGUiLCAiQ2F5ZW5uZSIsICJXaGl0ZSJdXQpkZiA9IHBkLkRhdGFGcmFtZShkYXRhLCBjb2x1bW5zPVsnQnJhbmQnLCAnTW9kZWwnLCAnQ29sb3InXSkKcHJpbnQgKGRmKQoKIyAwNS4xIERhdGFGcmFtZSBEaWN0ICAgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRhdGEgPSBbCiAgICB7IAogICAgICAgICJicmFuZCI6ICJUb3lvdGEiLCAKICAgICAgICAibW9kZWwiOiAiQ29yb2xsYSIsCiAgICAgICAgImNvbG9yIjogIkJsdWUiCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJGb3JkIiwgCiAgICAgICAgIm1vZGVsIjogIksiLAogICAgICAgICJjb2xvciI6ICJZZWxsb3ciCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJQb3JzY2hlIiwgCiAgICAgICAgIm1vZGVsIjogIkNheWVubmUiLAogICAgICAgICJjb2xvciI6ICJXaGl0ZSIKICAgIH0sCiAgICB7CiAgICAgICAgImJyYW5kIjogIlRlc2xhIiwgCiAgICAgICAgIm1vZGVsIjogIk1vZGVsIFMiLAogICAgICAgICJjb2xvciI6ICJSZWQiCiAgICB9Cl0KCmRmID0gcGQuRGF0YUZyYW1lKGRhdGEpCgpwcmludChkZikKCiMgMDUuMiBEYXRhRnJhbWUgaUxvYyAgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRmID0gcGQucmVhZF9jc3YgKCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludChkYXRhX2ZyYW1lLmlsb2NbMTMzLDZdKQoKIyAwNS4zIERhdGFGcmFtZSBIZWFkIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmLmhlYWQoMykpCgojIDA1LjQgRGF0YUZyYW1lIFRhaWwgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KcHJpbnQoZGYudGFpbCgzKSkKCiMgMDUuNSBQcmludCBDb2x1bW5zIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmW1snTmFtZScsICdUeXBlIDEnXV1bMDoxMF0pCgojIDA1LjYgTG9jIEZ1bmN0aW9uIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgpwcmludChkZi5sb2NbZGZbJ0F0dGFjayddID4gODBdKQoKIyAwNS43IEZpbHRlciBhbmQgQ291bnQgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KcHJpbnQobGVuKGRmLmxvY1tkZlsnTGVnZW5kYXJ5J10gPT0gVHJ1ZV0pKQogICAgIyBNeSBOb3RlczoKCiAgICAjIGRmWydMZWdlbmRhcnknXSA9PSBUcnVlOgogICAgIwogICAgIyAgICAgICBFc3RvIGNyZWEgdW5hIHNlcmllIGJvb2xlYW5hICh1bmEgY29sdW1uYSBkZSB2YWxvcmVzIFRydWUgbyBGYWxzZSkgZW4gbGEgY3VhbCAKICAgICMgICAgICAgY2FkYSBmaWxhIHNlIGV2YWzDumEgc2Vnw7puIHNpIGVsIHZhbG9yIGVuIGxhIGNvbHVtbmEgTGVnZW5kYXJ5IGVzIFRydWUuIAogICAgIyAgICAgICBFc3RvIGZpbHRyYSBsYXMgZmlsYXMgZW4gbGFzIHF1ZSBsYSBjb2x1bW5hIExlZ2VuZGFyeSB0aWVuZSBlbCB2YWxvciBUcnVlLgogICAgIwogICAgIyAgICAgICBTaSwgcG9yIGVqZW1wbG8sIGRmWydMZWdlbmRhcnknXSB0aWVuZSB2YWxvcmVzIGNvbW8gW1RydWUsIEZhbHNlLCBUcnVlLCBUcnVlXSwgCiAgICAjICAgICAgIGVudG9uY2VzIGRmWydMZWdlbmRhcnknXSA9PSBUcnVlIGRhcsOhIGNvbW8gcmVzdWx0YWRvIFtUcnVlLCBGYWxzZSwgVHJ1ZSwgVHJ1ZV0uCgogICAgIyBkZi5sb2NbZGZbJ0xlZ2VuZGFyeSddID09IFRydWVdOgogICAgIwogICAgIyAgICAgICBFbCAubG9jW10gZXMgdW4gbcOpdG9kbyBkZSBwYW5kYXMgcXVlIHNlIHV0aWxpemEgcGFyYSBhY2NlZGVyIGEgdW4gc3ViY29uanVudG8gCiAgICAjICAgICAgIGRlIGZpbGFzIG8gY29sdW1uYXMgZGUgdW4gRGF0YUZyYW1lLgogICAgIyAKICAgICMgICAgICAgQWwgcGFzYXJsZSBsYSBzZXJpZSBib29sZWFuYSBkZlsnTGVnZW5kYXJ5J10gPT0gVHJ1ZSwgLmxvY1tdIHNlbGVjY2lvbmEgc29sbyAKICAgICMgICAgICAgYXF1ZWxsYXMgZmlsYXMgZG9uZGUgbGEgY29uZGljacOzbiBlcyBUcnVlLiBFc3RvIGZpbHRyYSBlbCBEYXRhRnJhbWUgcGFyYSBtb3N0cmFyIAogICAgIyAgICAgICBzb2xvIGxhcyBmaWxhcyBkb25kZSBsYSBjb2x1bW5hIExlZ2VuZGFyeSB0aWVuZSBlbCB2YWxvciBUcnVlLgoKICAgICMgbGVuKC4uLik6CiAgICAjCiAgICAjICAgICAgIGxlbigpIGRldnVlbHZlIGxhIGxvbmdpdHVkIGRlIHVuIG9iamV0by4gRW4gZXN0ZSBjYXNvLCBlc3TDoSBjb250YW5kbyBjdcOhbnRhcyBmaWxhcwogICAgIyAgICAgICBoYXkgZW4gZWwgRGF0YUZyYW1lIGZpbHRyYWRvIChlcyBkZWNpciwgY3XDoW50YXMgZmlsYXMgdGllbmVuIExlZ2VuZGFyeSA9PSBUcnVlKS4KICAgICMgICAgICAgCiAgICAjICAgICAgIFNpLCBwb3IgZWplbXBsbywgaGF5IDMgZmlsYXMgZW4gbGFzIHF1ZSBMZWdlbmRhcnkgZXMgVHJ1ZSwgZW50b25jZXMgbGVuKCkgZGV2b2x2ZXLDoSAzLgoKCgoKCgojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCiMgcHl0aG9uIGFwcC5weQ==","ended_at":1737658813213,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA2IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA1LjctZmlsdGVyLWFuZC1jb3VudC90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW02IHBhc3NlZBtbMG0bWzMybSBpbiAwLjM1cxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737658282262,"completed_at":1737658813213},{"slug":"06-clean-datasets","position":18,"files":[{"path":".learn/exercises/06-clean-datasets/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/06-clean-datasets/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/06-clean-datasets/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/06-clean-datasets/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737658979350,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCm15X3NlcmllcyA9IHBkLlNlcmllcyhbMiwgNCwgNiwgOCwgMTBdKQptb2RpZmllZF9zZXJpZXMgPSBteV9zZXJpZXMuYXBwbHkobGFtYmRhIHg6eC8yKQpwcmludChtb2RpZmllZF9zZXJpZXMpCgojIDA1IERhdGFGcmFtZXMgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRhdGEgPSBbWyJUb3lvdGEiLCAiQ29yb2xsYSIsICJCbHVlIl0sIFsiRm9yZCIsICJLIiwgIlllbGxvdyJdLCBbIlBvcnNjaGUiLCAiQ2F5ZW5uZSIsICJXaGl0ZSJdXQpkZiA9IHBkLkRhdGFGcmFtZShkYXRhLCBjb2x1bW5zPVsnQnJhbmQnLCAnTW9kZWwnLCAnQ29sb3InXSkKcHJpbnQgKGRmKQoKIyAwNS4xIERhdGFGcmFtZSBEaWN0ICAgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRhdGEgPSBbCiAgICB7IAogICAgICAgICJicmFuZCI6ICJUb3lvdGEiLCAKICAgICAgICAibW9kZWwiOiAiQ29yb2xsYSIsCiAgICAgICAgImNvbG9yIjogIkJsdWUiCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJGb3JkIiwgCiAgICAgICAgIm1vZGVsIjogIksiLAogICAgICAgICJjb2xvciI6ICJZZWxsb3ciCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJQb3JzY2hlIiwgCiAgICAgICAgIm1vZGVsIjogIkNheWVubmUiLAogICAgICAgICJjb2xvciI6ICJXaGl0ZSIKICAgIH0sCiAgICB7CiAgICAgICAgImJyYW5kIjogIlRlc2xhIiwgCiAgICAgICAgIm1vZGVsIjogIk1vZGVsIFMiLAogICAgICAgICJjb2xvciI6ICJSZWQiCiAgICB9Cl0KCmRmID0gcGQuRGF0YUZyYW1lKGRhdGEpCgpwcmludChkZikKCiMgMDUuMiBEYXRhRnJhbWUgaUxvYyAgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRmID0gcGQucmVhZF9jc3YgKCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludChkYXRhX2ZyYW1lLmlsb2NbMTMzLDZdKQoKIyAwNS4zIERhdGFGcmFtZSBIZWFkIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmLmhlYWQoMykpCgojIDA1LjQgRGF0YUZyYW1lIFRhaWwgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KcHJpbnQoZGYudGFpbCgzKSkKCiMgMDUuNSBQcmludCBDb2x1bW5zIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmW1snTmFtZScsICdUeXBlIDEnXV1bMDoxMF0pCgojIDA1LjYgTG9jIEZ1bmN0aW9uIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgpwcmludChkZi5sb2NbZGZbJ0F0dGFjayddID4gODBdKQoKIyAwNS43IEZpbHRlciBhbmQgQ291bnQgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KcHJpbnQobGVuKGRmLmxvY1tkZlsnTGVnZW5kYXJ5J10gPT0gVHJ1ZV0pKQogICAgIyBNeSBOb3RlczoKCiAgICAjIGRmWydMZWdlbmRhcnknXSA9PSBUcnVlOgogICAgIwogICAgIyAgICAgICBFc3RvIGNyZWEgdW5hIHNlcmllIGJvb2xlYW5hICh1bmEgY29sdW1uYSBkZSB2YWxvcmVzIFRydWUgbyBGYWxzZSkgZW4gbGEgY3VhbCAKICAgICMgICAgICAgY2FkYSBmaWxhIHNlIGV2YWzDumEgc2Vnw7puIHNpIGVsIHZhbG9yIGVuIGxhIGNvbHVtbmEgTGVnZW5kYXJ5IGVzIFRydWUuIAogICAgIyAgICAgICBFc3RvIGZpbHRyYSBsYXMgZmlsYXMgZW4gbGFzIHF1ZSBsYSBjb2x1bW5hIExlZ2VuZGFyeSB0aWVuZSBlbCB2YWxvciBUcnVlLgogICAgIwogICAgIyAgICAgICBTaSwgcG9yIGVqZW1wbG8sIGRmWydMZWdlbmRhcnknXSB0aWVuZSB2YWxvcmVzIGNvbW8gW1RydWUsIEZhbHNlLCBUcnVlLCBUcnVlXSwgCiAgICAjICAgICAgIGVudG9uY2VzIGRmWydMZWdlbmRhcnknXSA9PSBUcnVlIGRhcsOhIGNvbW8gcmVzdWx0YWRvIFtUcnVlLCBGYWxzZSwgVHJ1ZSwgVHJ1ZV0uCgogICAgIyBkZi5sb2NbZGZbJ0xlZ2VuZGFyeSddID09IFRydWVdOgogICAgIwogICAgIyAgICAgICBFbCAubG9jW10gZXMgdW4gbcOpdG9kbyBkZSBwYW5kYXMgcXVlIHNlIHV0aWxpemEgcGFyYSBhY2NlZGVyIGEgdW4gc3ViY29uanVudG8gCiAgICAjICAgICAgIGRlIGZpbGFzIG8gY29sdW1uYXMgZGUgdW4gRGF0YUZyYW1lLgogICAgIyAKICAgICMgICAgICAgQWwgcGFzYXJsZSBsYSBzZXJpZSBib29sZWFuYSBkZlsnTGVnZW5kYXJ5J10gPT0gVHJ1ZSwgLmxvY1tdIHNlbGVjY2lvbmEgc29sbyAKICAgICMgICAgICAgYXF1ZWxsYXMgZmlsYXMgZG9uZGUgbGEgY29uZGljacOzbiBlcyBUcnVlLiBFc3RvIGZpbHRyYSBlbCBEYXRhRnJhbWUgcGFyYSBtb3N0cmFyIAogICAgIyAgICAgICBzb2xvIGxhcyBmaWxhcyBkb25kZSBsYSBjb2x1bW5hIExlZ2VuZGFyeSB0aWVuZSBlbCB2YWxvciBUcnVlLgoKICAgICMgbGVuKC4uLik6CiAgICAjCiAgICAjICAgICAgIGxlbigpIGRldnVlbHZlIGxhIGxvbmdpdHVkIGRlIHVuIG9iamV0by4gRW4gZXN0ZSBjYXNvLCBlc3TDoSBjb250YW5kbyBjdcOhbnRhcyBmaWxhcwogICAgIyAgICAgICBoYXkgZW4gZWwgRGF0YUZyYW1lIGZpbHRyYWRvIChlcyBkZWNpciwgY3XDoW50YXMgZmlsYXMgdGllbmVuIExlZ2VuZGFyeSA9PSBUcnVlKS4KICAgICMgICAgICAgCiAgICAjICAgICAgIFNpLCBwb3IgZWplbXBsbywgaGF5IDMgZmlsYXMgZW4gbGFzIHF1ZSBMZWdlbmRhcnkgZXMgVHJ1ZSwgZW50b25jZXMgbGVuKCkgZGV2b2x2ZXLDoSAzLgoKCiMgMDYgQ2xlYW4gRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRmX0JhYnlfTmFtZXMgPSBwZC5yZWFkX2NzdiAoIi5sZWFybi9hc3NldHMvdXNfYmFieV9uYW1lc19yaWdodC5jc3YiKQpwcmludChkZl9CYWJ5X05hbWVzLmhlYWQoNSkpCgojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgojIHB5dGhvbiBhcHAucHk=","ended_at":1737658980664,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA1IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA2LWNsZWFuLWRhdGFzZXRzL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybSAgICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW01IHBhc3NlZBtbMG0bWzMybSBpbiAwLjc3cxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737658815452,"completed_at":1737658980664},{"slug":"06.1-remove-column","position":19,"files":[{"path":".learn/exercises/06.1-remove-column/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/06.1-remove-column/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/06.1-remove-column/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/06.1-remove-column/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737659281647,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCm15X3NlcmllcyA9IHBkLlNlcmllcyhbMiwgNCwgNiwgOCwgMTBdKQptb2RpZmllZF9zZXJpZXMgPSBteV9zZXJpZXMuYXBwbHkobGFtYmRhIHg6eC8yKQpwcmludChtb2RpZmllZF9zZXJpZXMpCgojIDA1IERhdGFGcmFtZXMgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRhdGEgPSBbWyJUb3lvdGEiLCAiQ29yb2xsYSIsICJCbHVlIl0sIFsiRm9yZCIsICJLIiwgIlllbGxvdyJdLCBbIlBvcnNjaGUiLCAiQ2F5ZW5uZSIsICJXaGl0ZSJdXQpkZiA9IHBkLkRhdGFGcmFtZShkYXRhLCBjb2x1bW5zPVsnQnJhbmQnLCAnTW9kZWwnLCAnQ29sb3InXSkKcHJpbnQgKGRmKQoKIyAwNS4xIERhdGFGcmFtZSBEaWN0ICAgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRhdGEgPSBbCiAgICB7IAogICAgICAgICJicmFuZCI6ICJUb3lvdGEiLCAKICAgICAgICAibW9kZWwiOiAiQ29yb2xsYSIsCiAgICAgICAgImNvbG9yIjogIkJsdWUiCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJGb3JkIiwgCiAgICAgICAgIm1vZGVsIjogIksiLAogICAgICAgICJjb2xvciI6ICJZZWxsb3ciCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJQb3JzY2hlIiwgCiAgICAgICAgIm1vZGVsIjogIkNheWVubmUiLAogICAgICAgICJjb2xvciI6ICJXaGl0ZSIKICAgIH0sCiAgICB7CiAgICAgICAgImJyYW5kIjogIlRlc2xhIiwgCiAgICAgICAgIm1vZGVsIjogIk1vZGVsIFMiLAogICAgICAgICJjb2xvciI6ICJSZWQiCiAgICB9Cl0KCmRmID0gcGQuRGF0YUZyYW1lKGRhdGEpCgpwcmludChkZikKCiMgMDUuMiBEYXRhRnJhbWUgaUxvYyAgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRmID0gcGQucmVhZF9jc3YgKCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludChkYXRhX2ZyYW1lLmlsb2NbMTMzLDZdKQoKIyAwNS4zIERhdGFGcmFtZSBIZWFkIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmLmhlYWQoMykpCgojIDA1LjQgRGF0YUZyYW1lIFRhaWwgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KcHJpbnQoZGYudGFpbCgzKSkKCiMgMDUuNSBQcmludCBDb2x1bW5zIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmW1snTmFtZScsICdUeXBlIDEnXV1bMDoxMF0pCgojIDA1LjYgTG9jIEZ1bmN0aW9uIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgpwcmludChkZi5sb2NbZGZbJ0F0dGFjayddID4gODBdKQoKIyAwNS43IEZpbHRlciBhbmQgQ291bnQgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KcHJpbnQobGVuKGRmLmxvY1tkZlsnTGVnZW5kYXJ5J10gPT0gVHJ1ZV0pKQogICAgIyBNeSBOb3RlczoKCiAgICAjIGRmWydMZWdlbmRhcnknXSA9PSBUcnVlOgogICAgIwogICAgIyAgICAgICBFc3RvIGNyZWEgdW5hIHNlcmllIGJvb2xlYW5hICh1bmEgY29sdW1uYSBkZSB2YWxvcmVzIFRydWUgbyBGYWxzZSkgZW4gbGEgY3VhbCAKICAgICMgICAgICAgY2FkYSBmaWxhIHNlIGV2YWzDumEgc2Vnw7puIHNpIGVsIHZhbG9yIGVuIGxhIGNvbHVtbmEgTGVnZW5kYXJ5IGVzIFRydWUuIAogICAgIyAgICAgICBFc3RvIGZpbHRyYSBsYXMgZmlsYXMgZW4gbGFzIHF1ZSBsYSBjb2x1bW5hIExlZ2VuZGFyeSB0aWVuZSBlbCB2YWxvciBUcnVlLgogICAgIwogICAgIyAgICAgICBTaSwgcG9yIGVqZW1wbG8sIGRmWydMZWdlbmRhcnknXSB0aWVuZSB2YWxvcmVzIGNvbW8gW1RydWUsIEZhbHNlLCBUcnVlLCBUcnVlXSwgCiAgICAjICAgICAgIGVudG9uY2VzIGRmWydMZWdlbmRhcnknXSA9PSBUcnVlIGRhcsOhIGNvbW8gcmVzdWx0YWRvIFtUcnVlLCBGYWxzZSwgVHJ1ZSwgVHJ1ZV0uCgogICAgIyBkZi5sb2NbZGZbJ0xlZ2VuZGFyeSddID09IFRydWVdOgogICAgIwogICAgIyAgICAgICBFbCAubG9jW10gZXMgdW4gbcOpdG9kbyBkZSBwYW5kYXMgcXVlIHNlIHV0aWxpemEgcGFyYSBhY2NlZGVyIGEgdW4gc3ViY29uanVudG8gCiAgICAjICAgICAgIGRlIGZpbGFzIG8gY29sdW1uYXMgZGUgdW4gRGF0YUZyYW1lLgogICAgIyAKICAgICMgICAgICAgQWwgcGFzYXJsZSBsYSBzZXJpZSBib29sZWFuYSBkZlsnTGVnZW5kYXJ5J10gPT0gVHJ1ZSwgLmxvY1tdIHNlbGVjY2lvbmEgc29sbyAKICAgICMgICAgICAgYXF1ZWxsYXMgZmlsYXMgZG9uZGUgbGEgY29uZGljacOzbiBlcyBUcnVlLiBFc3RvIGZpbHRyYSBlbCBEYXRhRnJhbWUgcGFyYSBtb3N0cmFyIAogICAgIyAgICAgICBzb2xvIGxhcyBmaWxhcyBkb25kZSBsYSBjb2x1bW5hIExlZ2VuZGFyeSB0aWVuZSBlbCB2YWxvciBUcnVlLgoKICAgICMgbGVuKC4uLik6CiAgICAjCiAgICAjICAgICAgIGxlbigpIGRldnVlbHZlIGxhIGxvbmdpdHVkIGRlIHVuIG9iamV0by4gRW4gZXN0ZSBjYXNvLCBlc3TDoSBjb250YW5kbyBjdcOhbnRhcyBmaWxhcwogICAgIyAgICAgICBoYXkgZW4gZWwgRGF0YUZyYW1lIGZpbHRyYWRvIChlcyBkZWNpciwgY3XDoW50YXMgZmlsYXMgdGllbmVuIExlZ2VuZGFyeSA9PSBUcnVlKS4KICAgICMgICAgICAgCiAgICAjICAgICAgIFNpLCBwb3IgZWplbXBsbywgaGF5IDMgZmlsYXMgZW4gbGFzIHF1ZSBMZWdlbmRhcnkgZXMgVHJ1ZSwgZW50b25jZXMgbGVuKCkgZGV2b2x2ZXLDoSAzLgoKCiMgMDYgQ2xlYW4gRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRmX0JhYnlfTmFtZXMgPSBwZC5yZWFkX2NzdiAoIi5sZWFybi9hc3NldHMvdXNfYmFieV9uYW1lc19yaWdodC5jc3YiKQpwcmludChkZl9CYWJ5X05hbWVzLmhlYWQoNSkpCgojIDA2LjEgUmVtb3ZlIENvbHVtbiBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkZWwgZGZfQmFieV9OYW1lc1tkZl9CYWJ5X05hbWVzLmNvbHVtbnNbMF1dCnByaW50KGRmX0JhYnlfTmFtZXMuaGVhZCg1KSkKCiAgICAjIE15IE5vdGVzOgogICAgICAgICMgZGVsOgogICAgICAgICAgICAjIEVsIGNvbWFuZG8gZGVsIHNlIHV0aWxpemEgcGFyYSBlbGltaW5hciB1biBvYmpldG8gZW4gUHl0aG9uLgogICAgICAgICAgICAjIEVuIGVzdGUgY2FzbywgZGVsIGRmX0JhYnlfTmFtZXNbLi4uXSBlbGltaW5hIGxhIGNvbHVtbmEgZXNwZWNpZmljYWRhIChlbiBlc3RlIGNhc28sIGxhIGNvbHVtbmEgY3V5byBub21icmUgZXN0w6EgZW4gZGZfQmFieV9OYW1lcy5jb2x1bW5zWzBdKS4KICAgICAgICAgICAgIyBJbnRlcm5hbWVudGUsIHBhbmRhcyBlbGltaW5hIGxhIGNvbHVtbmEgY29tcGxldGEgeSBsYSByZW11ZXZlIGRlbCBEYXRhRnJhbWUuCgoKICAgICAgICAgICAgCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgojIHB5dGhvbiBhcHAucHk=","ended_at":1737659282698,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA2IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA2LjEtcmVtb3ZlLWNvbHVtbi90ZXN0LnB5IBtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW02IHBhc3NlZBtbMG0bWzMybSBpbiAwLjc0cxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737658992092,"completed_at":1737659282698},{"slug":"06.2-value-counts","position":20,"files":[{"path":".learn/exercises/06.2-value-counts/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/06.2-value-counts/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/06.2-value-counts/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/06.2-value-counts/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737659945456,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCm15X3NlcmllcyA9IHBkLlNlcmllcyhbMiwgNCwgNiwgOCwgMTBdKQptb2RpZmllZF9zZXJpZXMgPSBteV9zZXJpZXMuYXBwbHkobGFtYmRhIHg6eC8yKQpwcmludChtb2RpZmllZF9zZXJpZXMpCgojIDA1IERhdGFGcmFtZXMgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRhdGEgPSBbWyJUb3lvdGEiLCAiQ29yb2xsYSIsICJCbHVlIl0sIFsiRm9yZCIsICJLIiwgIlllbGxvdyJdLCBbIlBvcnNjaGUiLCAiQ2F5ZW5uZSIsICJXaGl0ZSJdXQpkZiA9IHBkLkRhdGFGcmFtZShkYXRhLCBjb2x1bW5zPVsnQnJhbmQnLCAnTW9kZWwnLCAnQ29sb3InXSkKcHJpbnQgKGRmKQoKIyAwNS4xIERhdGFGcmFtZSBEaWN0ICAgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRhdGEgPSBbCiAgICB7IAogICAgICAgICJicmFuZCI6ICJUb3lvdGEiLCAKICAgICAgICAibW9kZWwiOiAiQ29yb2xsYSIsCiAgICAgICAgImNvbG9yIjogIkJsdWUiCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJGb3JkIiwgCiAgICAgICAgIm1vZGVsIjogIksiLAogICAgICAgICJjb2xvciI6ICJZZWxsb3ciCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJQb3JzY2hlIiwgCiAgICAgICAgIm1vZGVsIjogIkNheWVubmUiLAogICAgICAgICJjb2xvciI6ICJXaGl0ZSIKICAgIH0sCiAgICB7CiAgICAgICAgImJyYW5kIjogIlRlc2xhIiwgCiAgICAgICAgIm1vZGVsIjogIk1vZGVsIFMiLAogICAgICAgICJjb2xvciI6ICJSZWQiCiAgICB9Cl0KCmRmID0gcGQuRGF0YUZyYW1lKGRhdGEpCgpwcmludChkZikKCiMgMDUuMiBEYXRhRnJhbWUgaUxvYyAgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRmID0gcGQucmVhZF9jc3YgKCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludChkYXRhX2ZyYW1lLmlsb2NbMTMzLDZdKQoKIyAwNS4zIERhdGFGcmFtZSBIZWFkIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmLmhlYWQoMykpCgojIDA1LjQgRGF0YUZyYW1lIFRhaWwgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KcHJpbnQoZGYudGFpbCgzKSkKCiMgMDUuNSBQcmludCBDb2x1bW5zIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmW1snTmFtZScsICdUeXBlIDEnXV1bMDoxMF0pCgojIDA1LjYgTG9jIEZ1bmN0aW9uIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgpwcmludChkZi5sb2NbZGZbJ0F0dGFjayddID4gODBdKQoKIyAwNS43IEZpbHRlciBhbmQgQ291bnQgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KcHJpbnQobGVuKGRmLmxvY1tkZlsnTGVnZW5kYXJ5J10gPT0gVHJ1ZV0pKQogICAgIyBNeSBOb3RlczoKCiAgICAjIGRmWydMZWdlbmRhcnknXSA9PSBUcnVlOgogICAgIwogICAgIyAgICAgICBFc3RvIGNyZWEgdW5hIHNlcmllIGJvb2xlYW5hICh1bmEgY29sdW1uYSBkZSB2YWxvcmVzIFRydWUgbyBGYWxzZSkgZW4gbGEgY3VhbCAKICAgICMgICAgICAgY2FkYSBmaWxhIHNlIGV2YWzDumEgc2Vnw7puIHNpIGVsIHZhbG9yIGVuIGxhIGNvbHVtbmEgTGVnZW5kYXJ5IGVzIFRydWUuIAogICAgIyAgICAgICBFc3RvIGZpbHRyYSBsYXMgZmlsYXMgZW4gbGFzIHF1ZSBsYSBjb2x1bW5hIExlZ2VuZGFyeSB0aWVuZSBlbCB2YWxvciBUcnVlLgogICAgIwogICAgIyAgICAgICBTaSwgcG9yIGVqZW1wbG8sIGRmWydMZWdlbmRhcnknXSB0aWVuZSB2YWxvcmVzIGNvbW8gW1RydWUsIEZhbHNlLCBUcnVlLCBUcnVlXSwgCiAgICAjICAgICAgIGVudG9uY2VzIGRmWydMZWdlbmRhcnknXSA9PSBUcnVlIGRhcsOhIGNvbW8gcmVzdWx0YWRvIFtUcnVlLCBGYWxzZSwgVHJ1ZSwgVHJ1ZV0uCgogICAgIyBkZi5sb2NbZGZbJ0xlZ2VuZGFyeSddID09IFRydWVdOgogICAgIwogICAgIyAgICAgICBFbCAubG9jW10gZXMgdW4gbcOpdG9kbyBkZSBwYW5kYXMgcXVlIHNlIHV0aWxpemEgcGFyYSBhY2NlZGVyIGEgdW4gc3ViY29uanVudG8gCiAgICAjICAgICAgIGRlIGZpbGFzIG8gY29sdW1uYXMgZGUgdW4gRGF0YUZyYW1lLgogICAgIyAKICAgICMgICAgICAgQWwgcGFzYXJsZSBsYSBzZXJpZSBib29sZWFuYSBkZlsnTGVnZW5kYXJ5J10gPT0gVHJ1ZSwgLmxvY1tdIHNlbGVjY2lvbmEgc29sbyAKICAgICMgICAgICAgYXF1ZWxsYXMgZmlsYXMgZG9uZGUgbGEgY29uZGljacOzbiBlcyBUcnVlLiBFc3RvIGZpbHRyYSBlbCBEYXRhRnJhbWUgcGFyYSBtb3N0cmFyIAogICAgIyAgICAgICBzb2xvIGxhcyBmaWxhcyBkb25kZSBsYSBjb2x1bW5hIExlZ2VuZGFyeSB0aWVuZSBlbCB2YWxvciBUcnVlLgoKICAgICMgbGVuKC4uLik6CiAgICAjCiAgICAjICAgICAgIGxlbigpIGRldnVlbHZlIGxhIGxvbmdpdHVkIGRlIHVuIG9iamV0by4gRW4gZXN0ZSBjYXNvLCBlc3TDoSBjb250YW5kbyBjdcOhbnRhcyBmaWxhcwogICAgIyAgICAgICBoYXkgZW4gZWwgRGF0YUZyYW1lIGZpbHRyYWRvIChlcyBkZWNpciwgY3XDoW50YXMgZmlsYXMgdGllbmVuIExlZ2VuZGFyeSA9PSBUcnVlKS4KICAgICMgICAgICAgCiAgICAjICAgICAgIFNpLCBwb3IgZWplbXBsbywgaGF5IDMgZmlsYXMgZW4gbGFzIHF1ZSBMZWdlbmRhcnkgZXMgVHJ1ZSwgZW50b25jZXMgbGVuKCkgZGV2b2x2ZXLDoSAzLgoKCiMgMDYgQ2xlYW4gRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRmX0JhYnlfTmFtZXMgPSBwZC5yZWFkX2NzdiAoIi5sZWFybi9hc3NldHMvdXNfYmFieV9uYW1lc19yaWdodC5jc3YiKQpwcmludChkZl9CYWJ5X05hbWVzLmhlYWQoNSkpCgojIDA2LjEgUmVtb3ZlIENvbHVtbiBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkZWwgZGZfQmFieV9OYW1lc1tkZl9CYWJ5X05hbWVzLmNvbHVtbnNbMF1dCnByaW50KGRmX0JhYnlfTmFtZXMuaGVhZCg1KSkKCiAgICAjIE15IE5vdGVzOgogICAgICAgICMgZGVsOgogICAgICAgICAgICAjIEVsIGNvbWFuZG8gZGVsIHNlIHV0aWxpemEgcGFyYSBlbGltaW5hciB1biBvYmpldG8gZW4gUHl0aG9uLgogICAgICAgICAgICAjIEVuIGVzdGUgY2FzbywgZGVsIGRmX0JhYnlfTmFtZXNbLi4uXSBlbGltaW5hIGxhIGNvbHVtbmEgZXNwZWNpZmljYWRhIChlbiBlc3RlIGNhc28sIGxhIGNvbHVtbmEgY3V5byBub21icmUgZXN0w6EgZW4gZGZfQmFieV9OYW1lcy5jb2x1bW5zWzBdKS4KICAgICAgICAgICAgIyBJbnRlcm5hbWVudGUsIHBhbmRhcyBlbGltaW5hIGxhIGNvbHVtbmEgY29tcGxldGEgeSBsYSByZW11ZXZlIGRlbCBEYXRhRnJhbWUuCgoKIyAwNi4yIFZhbHVlIENvdW50cyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwoKY291bnQgPSBkZl9CYWJ5X05hbWVzWydHZW5kZXInXS52YWx1ZV9jb3VudHMoKQpwcmludChjb3VudCkKCgojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCiMgcHl0aG9uIGFwcC5weQ==","ended_at":1737659946501,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA1IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA2LjItdmFsdWUtY291bnRzL3Rlc3QucHkgG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybSAgICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW01IHBhc3NlZBtbMG0bWzMybSBpbiAwLjc0cxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737659285065,"completed_at":1737659946501},{"slug":"06.3-group-by","position":21,"files":[{"path":".learn/exercises/06.3-group-by/README.es.md","name":"README.es.md","hidden":true},{"path":".learn/exercises/06.3-group-by/README.md","name":"README.md","hidden":true},{"path":".learn/exercises/06.3-group-by/solution.hide.py","name":"solution.hide.py","hidden":true},{"path":".learn/exercises/06.3-group-by/test.py","name":"test.py","hidden":true}],"ai_interactions":[],"compilations":[],"tests":[{"starting_at":1737660222431,"source_code":"CiMgMDIuMSBDcmVhdGUgYSBTY3JpcHQgX19fX19fX19fX19fX19fX19fX19fX19fXwpwcmludCgiSGVsbG8gV29ybGQiKQoKIyAwMi4yIEltcG9ydCBfX19fX19fX19fX19fX19fX19fX19fX19fCmltcG9ydCBwYW5kYXMgYXMgcGQKZGF0YV9mcmFtZSA9IHBkLnJlYWRfY3N2KCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludCAoZGF0YV9mcmFtZSkKCiMgMDMgRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fXwoKIyAwNCBTZXJpZXMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KZGF0YSA9IHBkLlNlcmllcyhbMjMsNDUsNywzNCw2LDYzLDM2LDc4LDU0LDM0XSkKcHJpbnQoZGF0YSkKCiMgMDQuMSBEYXRlIFJhbmdlICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkYXRhX2RhdGVzID0gcGQuZGF0ZV9yYW5nZSgiMjAyMS0wNS0wMSIsICIyMDIxLTA1LTEyIikKcHJpbnQoZGF0YV9kYXRlcykKCiMgMDQuMiBTZXJpZXMgQXBwbHkgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCm15X3NlcmllcyA9IHBkLlNlcmllcyhbMiwgNCwgNiwgOCwgMTBdKQptb2RpZmllZF9zZXJpZXMgPSBteV9zZXJpZXMuYXBwbHkobGFtYmRhIHg6eC8yKQpwcmludChtb2RpZmllZF9zZXJpZXMpCgojIDA1IERhdGFGcmFtZXMgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRhdGEgPSBbWyJUb3lvdGEiLCAiQ29yb2xsYSIsICJCbHVlIl0sIFsiRm9yZCIsICJLIiwgIlllbGxvdyJdLCBbIlBvcnNjaGUiLCAiQ2F5ZW5uZSIsICJXaGl0ZSJdXQpkZiA9IHBkLkRhdGFGcmFtZShkYXRhLCBjb2x1bW5zPVsnQnJhbmQnLCAnTW9kZWwnLCAnQ29sb3InXSkKcHJpbnQgKGRmKQoKIyAwNS4xIERhdGFGcmFtZSBEaWN0ICAgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRhdGEgPSBbCiAgICB7IAogICAgICAgICJicmFuZCI6ICJUb3lvdGEiLCAKICAgICAgICAibW9kZWwiOiAiQ29yb2xsYSIsCiAgICAgICAgImNvbG9yIjogIkJsdWUiCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJGb3JkIiwgCiAgICAgICAgIm1vZGVsIjogIksiLAogICAgICAgICJjb2xvciI6ICJZZWxsb3ciCiAgICB9LAogICAgewogICAgICAgICJicmFuZCI6ICJQb3JzY2hlIiwgCiAgICAgICAgIm1vZGVsIjogIkNheWVubmUiLAogICAgICAgICJjb2xvciI6ICJXaGl0ZSIKICAgIH0sCiAgICB7CiAgICAgICAgImJyYW5kIjogIlRlc2xhIiwgCiAgICAgICAgIm1vZGVsIjogIk1vZGVsIFMiLAogICAgICAgICJjb2xvciI6ICJSZWQiCiAgICB9Cl0KCmRmID0gcGQuRGF0YUZyYW1lKGRhdGEpCgpwcmludChkZikKCiMgMDUuMiBEYXRhRnJhbWUgaUxvYyAgIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmRmID0gcGQucmVhZF9jc3YgKCcubGVhcm4vYXNzZXRzL3Bva2Vtb25fZGF0YS5jc3YnKQpwcmludChkYXRhX2ZyYW1lLmlsb2NbMTMzLDZdKQoKIyAwNS4zIERhdGFGcmFtZSBIZWFkIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmLmhlYWQoMykpCgojIDA1LjQgRGF0YUZyYW1lIFRhaWwgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KcHJpbnQoZGYudGFpbCgzKSkKCiMgMDUuNSBQcmludCBDb2x1bW5zIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCnByaW50KGRmW1snTmFtZScsICdUeXBlIDEnXV1bMDoxMF0pCgojIDA1LjYgTG9jIEZ1bmN0aW9uIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgpwcmludChkZi5sb2NbZGZbJ0F0dGFjayddID4gODBdKQoKIyAwNS43IEZpbHRlciBhbmQgQ291bnQgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KcHJpbnQobGVuKGRmLmxvY1tkZlsnTGVnZW5kYXJ5J10gPT0gVHJ1ZV0pKQogICAgIyBNeSBOb3RlczoKCiAgICAjIGRmWydMZWdlbmRhcnknXSA9PSBUcnVlOgogICAgIwogICAgIyAgICAgICBFc3RvIGNyZWEgdW5hIHNlcmllIGJvb2xlYW5hICh1bmEgY29sdW1uYSBkZSB2YWxvcmVzIFRydWUgbyBGYWxzZSkgZW4gbGEgY3VhbCAKICAgICMgICAgICAgY2FkYSBmaWxhIHNlIGV2YWzDumEgc2Vnw7puIHNpIGVsIHZhbG9yIGVuIGxhIGNvbHVtbmEgTGVnZW5kYXJ5IGVzIFRydWUuIAogICAgIyAgICAgICBFc3RvIGZpbHRyYSBsYXMgZmlsYXMgZW4gbGFzIHF1ZSBsYSBjb2x1bW5hIExlZ2VuZGFyeSB0aWVuZSBlbCB2YWxvciBUcnVlLgogICAgIwogICAgIyAgICAgICBTaSwgcG9yIGVqZW1wbG8sIGRmWydMZWdlbmRhcnknXSB0aWVuZSB2YWxvcmVzIGNvbW8gW1RydWUsIEZhbHNlLCBUcnVlLCBUcnVlXSwgCiAgICAjICAgICAgIGVudG9uY2VzIGRmWydMZWdlbmRhcnknXSA9PSBUcnVlIGRhcsOhIGNvbW8gcmVzdWx0YWRvIFtUcnVlLCBGYWxzZSwgVHJ1ZSwgVHJ1ZV0uCgogICAgIyBkZi5sb2NbZGZbJ0xlZ2VuZGFyeSddID09IFRydWVdOgogICAgIwogICAgIyAgICAgICBFbCAubG9jW10gZXMgdW4gbcOpdG9kbyBkZSBwYW5kYXMgcXVlIHNlIHV0aWxpemEgcGFyYSBhY2NlZGVyIGEgdW4gc3ViY29uanVudG8gCiAgICAjICAgICAgIGRlIGZpbGFzIG8gY29sdW1uYXMgZGUgdW4gRGF0YUZyYW1lLgogICAgIyAKICAgICMgICAgICAgQWwgcGFzYXJsZSBsYSBzZXJpZSBib29sZWFuYSBkZlsnTGVnZW5kYXJ5J10gPT0gVHJ1ZSwgLmxvY1tdIHNlbGVjY2lvbmEgc29sbyAKICAgICMgICAgICAgYXF1ZWxsYXMgZmlsYXMgZG9uZGUgbGEgY29uZGljacOzbiBlcyBUcnVlLiBFc3RvIGZpbHRyYSBlbCBEYXRhRnJhbWUgcGFyYSBtb3N0cmFyIAogICAgIyAgICAgICBzb2xvIGxhcyBmaWxhcyBkb25kZSBsYSBjb2x1bW5hIExlZ2VuZGFyeSB0aWVuZSBlbCB2YWxvciBUcnVlLgoKICAgICMgbGVuKC4uLik6CiAgICAjCiAgICAjICAgICAgIGxlbigpIGRldnVlbHZlIGxhIGxvbmdpdHVkIGRlIHVuIG9iamV0by4gRW4gZXN0ZSBjYXNvLCBlc3TDoSBjb250YW5kbyBjdcOhbnRhcyBmaWxhcwogICAgIyAgICAgICBoYXkgZW4gZWwgRGF0YUZyYW1lIGZpbHRyYWRvIChlcyBkZWNpciwgY3XDoW50YXMgZmlsYXMgdGllbmVuIExlZ2VuZGFyeSA9PSBUcnVlKS4KICAgICMgICAgICAgCiAgICAjICAgICAgIFNpLCBwb3IgZWplbXBsbywgaGF5IDMgZmlsYXMgZW4gbGFzIHF1ZSBMZWdlbmRhcnkgZXMgVHJ1ZSwgZW50b25jZXMgbGVuKCkgZGV2b2x2ZXLDoSAzLgoKCiMgMDYgQ2xlYW4gRGF0YXNldHMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmRmX0JhYnlfTmFtZXMgPSBwZC5yZWFkX2NzdiAoIi5sZWFybi9hc3NldHMvdXNfYmFieV9uYW1lc19yaWdodC5jc3YiKQpwcmludChkZl9CYWJ5X05hbWVzLmhlYWQoNSkpCgojIDA2LjEgUmVtb3ZlIENvbHVtbiBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpkZWwgZGZfQmFieV9OYW1lc1tkZl9CYWJ5X05hbWVzLmNvbHVtbnNbMF1dCnByaW50KGRmX0JhYnlfTmFtZXMuaGVhZCg1KSkKCiAgICAjIE15IE5vdGVzOgogICAgICAgICMgZGVsOgogICAgICAgICAgICAjIEVsIGNvbWFuZG8gZGVsIHNlIHV0aWxpemEgcGFyYSBlbGltaW5hciB1biBvYmpldG8gZW4gUHl0aG9uLgogICAgICAgICAgICAjIEVuIGVzdGUgY2FzbywgZGVsIGRmX0JhYnlfTmFtZXNbLi4uXSBlbGltaW5hIGxhIGNvbHVtbmEgZXNwZWNpZmljYWRhIChlbiBlc3RlIGNhc28sIGxhIGNvbHVtbmEgY3V5byBub21icmUgZXN0w6EgZW4gZGZfQmFieV9OYW1lcy5jb2x1bW5zWzBdKS4KICAgICAgICAgICAgIyBJbnRlcm5hbWVudGUsIHBhbmRhcyBlbGltaW5hIGxhIGNvbHVtbmEgY29tcGxldGEgeSBsYSByZW11ZXZlIGRlbCBEYXRhRnJhbWUuCgoKIyAwNi4yIFZhbHVlIENvdW50cyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwoKY291bnQgPSBkZl9CYWJ5X05hbWVzWydHZW5kZXInXS52YWx1ZV9jb3VudHMoKQpwcmludChjb3VudCkKCgojIDA2LjMgR3JvdXAgQnkgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCm5hbWVzID0gZGZfQmFieV9OYW1lcy5ncm91cGJ5KCJOYW1lIikuc3VtKCkKcHJpbnQobGVuKG5hbWVzKSkKCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KIyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwojIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCiMgcHl0aG9uIGFwcC5weQ==","ended_at":1737660224532,"stdout":"G1sxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IHRlc3Qgc2Vzc2lvbiBzdGFydHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQpwbGF0Zm9ybSBsaW51eCAtLSBQeXRob24gMy4xMC4xMiwgcHl0ZXN0LTcuMy4xLCBwbHVnZ3ktMS4wLjAKcm9vdGRpcjogL3dvcmtzcGFjZXMvcHl0aG9uLXBhbmRhcy10dXRvcmlhbApwbHVnaW5zOiB0ZXN0ZG94LTMuMS4wCmNvbGxlY3RlZCA4IGl0ZW1zCgoubGVhcm4vZXhlcmNpc2VzLzA2LjMtZ3JvdXAtYnkvdGVzdC5weSAbWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtLhtbMG0bWzMybS4bWzBtG1szMm0uG1swbRtbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICBbMTAwJV0bWzBtCgobWzMybT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAbWzMybRtbMW04IHBhc3NlZBtbMG0bWzMybSBpbiAxLjc5cxtbMG0bWzMybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09G1swbQo=","stderr":"","exit_code":0}],"is_testeable":true,"opened_at":1737659950956,"completed_at":1737660224533}],"workout_session":[{"started_at":1737655035087}],"last_interaction_at":1737660224533}